<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="personnel.zpark.dao.BasicMapper">
  <resultMap id="BaseResultMap" type="personnel.zpark.model.Basic">
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="Teacher_ID" jdbcType="INTEGER" property="teacherId" />
    <result column="Happen" jdbcType="INTEGER" property="happen" />
    <result column="Title" jdbcType="INTEGER" property="title" />
    <result column="Education" jdbcType="INTEGER" property="education" />
    <result column="Job_Title" jdbcType="INTEGER" property="jobTitle" />
    <result column="Get_Time" jdbcType="DATE" property="getTime" />
    <result column="Hire_Time" jdbcType="DATE" property="hireTime" />
    <result column="Hire_Years" jdbcType="INTEGER" property="hireYears" />
    <result column="Types" jdbcType="INTEGER" property="types" />
    <result column="Score_Of_All" jdbcType="INTEGER" property="scoreOfAll" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, Teacher_ID, Happen, Title, Education, Job_Title, Get_Time, Hire_Time, Hire_Years, 
    Types, Score_Of_All
  </sql>
  <select id="selectByExample" parameterType="personnel.zpark.model.BasicExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from basic
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from basic
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from basic
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="personnel.zpark.model.BasicExample">
    delete from basic
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="personnel.zpark.model.Basic">
    insert into basic (ID, Teacher_ID, Happen, 
      Title, Education, Job_Title, 
      Get_Time, Hire_Time, Hire_Years, 
      Types, Score_Of_All)
    values (#{id,jdbcType=INTEGER}, #{teacherId,jdbcType=INTEGER}, #{happen,jdbcType=INTEGER}, 
      #{title,jdbcType=INTEGER}, #{education,jdbcType=INTEGER}, #{jobTitle,jdbcType=INTEGER}, 
      #{getTime,jdbcType=DATE}, #{hireTime,jdbcType=DATE}, #{hireYears,jdbcType=INTEGER}, 
      #{types,jdbcType=INTEGER}, #{scoreOfAll,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="personnel.zpark.model.Basic">
    insert into basic
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        ID,
      </if>
      <if test="teacherId != null">
        Teacher_ID,
      </if>
      <if test="happen != null">
        Happen,
      </if>
      <if test="title != null">
        Title,
      </if>
      <if test="education != null">
        Education,
      </if>
      <if test="jobTitle != null">
        Job_Title,
      </if>
      <if test="getTime != null">
        Get_Time,
      </if>
      <if test="hireTime != null">
        Hire_Time,
      </if>
      <if test="hireYears != null">
        Hire_Years,
      </if>
      <if test="types != null">
        Types,
      </if>
      <if test="scoreOfAll != null">
        Score_Of_All,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="teacherId != null">
        #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="happen != null">
        #{happen,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        #{title,jdbcType=INTEGER},
      </if>
      <if test="education != null">
        #{education,jdbcType=INTEGER},
      </if>
      <if test="jobTitle != null">
        #{jobTitle,jdbcType=INTEGER},
      </if>
      <if test="getTime != null">
        #{getTime,jdbcType=DATE},
      </if>
      <if test="hireTime != null">
        #{hireTime,jdbcType=DATE},
      </if>
      <if test="hireYears != null">
        #{hireYears,jdbcType=INTEGER},
      </if>
      <if test="types != null">
        #{types,jdbcType=INTEGER},
      </if>
      <if test="scoreOfAll != null">
        #{scoreOfAll,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="personnel.zpark.model.BasicExample" resultType="java.lang.Long">
    select count(*) from basic
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update basic
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.teacherId != null">
        Teacher_ID = #{record.teacherId,jdbcType=INTEGER},
      </if>
      <if test="record.happen != null">
        Happen = #{record.happen,jdbcType=INTEGER},
      </if>
      <if test="record.title != null">
        Title = #{record.title,jdbcType=INTEGER},
      </if>
      <if test="record.education != null">
        Education = #{record.education,jdbcType=INTEGER},
      </if>
      <if test="record.jobTitle != null">
        Job_Title = #{record.jobTitle,jdbcType=INTEGER},
      </if>
      <if test="record.getTime != null">
        Get_Time = #{record.getTime,jdbcType=DATE},
      </if>
      <if test="record.hireTime != null">
        Hire_Time = #{record.hireTime,jdbcType=DATE},
      </if>
      <if test="record.hireYears != null">
        Hire_Years = #{record.hireYears,jdbcType=INTEGER},
      </if>
      <if test="record.types != null">
        Types = #{record.types,jdbcType=INTEGER},
      </if>
      <if test="record.scoreOfAll != null">
        Score_Of_All = #{record.scoreOfAll,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update basic
    set ID = #{record.id,jdbcType=INTEGER},
      Teacher_ID = #{record.teacherId,jdbcType=INTEGER},
      Happen = #{record.happen,jdbcType=INTEGER},
      Title = #{record.title,jdbcType=INTEGER},
      Education = #{record.education,jdbcType=INTEGER},
      Job_Title = #{record.jobTitle,jdbcType=INTEGER},
      Get_Time = #{record.getTime,jdbcType=DATE},
      Hire_Time = #{record.hireTime,jdbcType=DATE},
      Hire_Years = #{record.hireYears,jdbcType=INTEGER},
      Types = #{record.types,jdbcType=INTEGER},
      Score_Of_All = #{record.scoreOfAll,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="personnel.zpark.model.Basic">
    update basic
    <set>
      <if test="teacherId != null">
        Teacher_ID = #{teacherId,jdbcType=INTEGER},
      </if>
      <if test="happen != null">
        Happen = #{happen,jdbcType=INTEGER},
      </if>
      <if test="title != null">
        Title = #{title,jdbcType=INTEGER},
      </if>
      <if test="education != null">
        Education = #{education,jdbcType=INTEGER},
      </if>
      <if test="jobTitle != null">
        Job_Title = #{jobTitle,jdbcType=INTEGER},
      </if>
      <if test="getTime != null">
        Get_Time = #{getTime,jdbcType=DATE},
      </if>
      <if test="hireTime != null">
        Hire_Time = #{hireTime,jdbcType=DATE},
      </if>
      <if test="hireYears != null">
        Hire_Years = #{hireYears,jdbcType=INTEGER},
      </if>
      <if test="types != null">
        Types = #{types,jdbcType=INTEGER},
      </if>
      <if test="scoreOfAll != null">
        Score_Of_All = #{scoreOfAll,jdbcType=INTEGER},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="personnel.zpark.model.Basic">
    update basic
    set Teacher_ID = #{teacherId,jdbcType=INTEGER},
      Happen = #{happen,jdbcType=INTEGER},
      Title = #{title,jdbcType=INTEGER},
      Education = #{education,jdbcType=INTEGER},
      Job_Title = #{jobTitle,jdbcType=INTEGER},
      Get_Time = #{getTime,jdbcType=DATE},
      Hire_Time = #{hireTime,jdbcType=DATE},
      Hire_Years = #{hireYears,jdbcType=INTEGER},
      Types = #{types,jdbcType=INTEGER},
      Score_Of_All = #{scoreOfAll,jdbcType=INTEGER}
    where ID = #{id,jdbcType=INTEGER}
  </update>
</mapper>